# -*- coding: utf-8 -*-
"""Prediction(Decision tree).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/GBDeepaPriya/LGMVIP-DataScience-Task-1/blob/main/Prediction(Decision%20tree).ipynb

**Import** **Library**
"""

import pandas as pd

import numpy as np

"""**Import Data**"""

iris=pd.read_csv("https://github.com/GBDeepaPriya/LGMVIP-DataScience-Task-1/raw/main/Iris.csv")

iris.head()

"""**Describe Data**"""

iris.describe()

iris.info

iris.columns

"""**Define Target Variable (y) and Feature Variables (X)**

---


"""

x=iris[['Id', 'SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm',]]

x.shape

y=iris['Species']

y.shape

y

x

"""**Train Test Split**


"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.3,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""**Modeling**"""

from sklearn.tree import DecisionTreeClassifier

model=DecisionTreeClassifier()

model.fit(x_train,y_train)

"""**Prediction:**"""

y_pred=model.predict(x_test)

y_pred.shape

y_pred

model.predict_proba(x_test)

"""**Model Evaluation**"""

from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

confusion_matrix(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))

"""**Data Visualization**"""

import matplotlib.pyplot as plt

from sklearn import tree

plt.figure(figsize=(15, 10))

tree.plot_tree(model, feature_names=x.columns, class_names=np.unique(y), filled=True)

import seaborn as sns

from sklearn import metrics

score = model.score(x_test, y_test)
print(score)

print(metrics.classification_report(y_test,model.predict(x_test)))

cm = metrics.confusion_matrix(y_test, model.predict(x_test))

plt.figure(figsize=(7,7))
sns.heatmap(cm, annot=True,
            fmt=".0f",
            linewidths=.5,
            square = True,
            cmap = 'Blues');
plt.ylabel('Actual label', fontsize = 15);
plt.xlabel('Predicted label', fontsize = 15);
plt.title('Accuracy Score: {}'.format(score), size = 15);
plt.tick_params(labelsize= 15)

plt.plot(x.iloc[0,:])

plt.plot(x.iloc[1,:])